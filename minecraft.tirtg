interpretation string: de.up.ling.irtg.algebra.StringAlgebra
interpretation ref: de.up.ling.irtg.algebra.SetAlgebra

// a referent is always the location the current subtree refers to
// Terminalsymbole dÃ¼rfen nur in einer einzigen Regel auftreten

S! -> s(RefLoc) [0.9]
  [string] *("the block", ?1)
  [ref] ?1

RefBlock -> blockloc(RefLoc) [0.9]
  [string] *("the block", ?1)
  [ref] ?1

// RefLoc - refers to a position which may or may not contain a block

// refer to above of before
// foreach { l1, obj, l2 | top-of(l1,l2) and location(l1) and location(l2) and at(obj,l2)}:
RefLoc -> top(RefBlock) [0.9]
  [string] *("on top of", ?1)
  [ref] project_1(intersect_2(top-of,?1))
  
RefLoc -> below(RefBlock) [0.9]
  [string] *("below of", ?1)
  [ref] project_2(intersect_1(top-of,?1))
  
RefLoc -> left(RefBlock) [0.9]
  [string] *("to the left of", ?1)
  [ref] project_1(intersect_2(left-of,?1))
  
RefLoc -> right(RefBlock) [0.9]
  [string] *("to the right of", ?1)
  [ref] project_2(intersect_1(left-of,?1))
  
RefLoc -> front(RefBlock) [0.9]
  [string] *("infront of", ?1)
  [ref] project_1(intersect_2(in-front-of,?1))
  
RefLoc -> behind(RefBlock) [0.9]
  [string] *("behind", ?1)
  [ref] project_2(intersect_1(in-front-of,?1))

RefBlock -> uniqblockdesc(AdjBlock) [0.9]
 [string] *("the", ?1)
 [ref] project_2(intersect_1(at, size_1(?1)))

AdjBlock -> orangeblock [0.9]
  [string] "orange block"
  [ref] orange
  
AdjBlock -> yellowblock [0.9]
  [string] "yellow block"
  [ref] yellow

AdjBlock -> blueblock [0.9]
  [string] "blue block"
  [ref] blue

AdjBlock -> prevblock [0.9]
  [string] "previous block"
  [ref] it
