interpretation string: de.up.ling.irtg.algebra.StringAlgebra
interpretation ref: de.up.ling.irtg.algebra.SetAlgebra
interpretation sem: de.up.ling.irtg.algebra.SubsetAlgebra

// a referent is always the location the current subtree refers to
// Terminalsymbole dÃ¼rfen nur in einer einzigen Regel auftreten

// Refers to the wall if all indefPPs also refer to the indefinite
// wall and nothing else.
// (size_1(?1)) -> all PPs refer to the same thing
// intersect_1 -> this thing is the indefwall


// NPs
////////////////////////////////////////////////////////////////////////
IndefNP! -> np(N) [-0.9]
  [string] *("a", ?1)
  [ref] ?1
  [sem] ?1

DefNP -> dnp(N)  [-0.9]
  [string] *("the", ?1)
  [ref] size_1(?1)
  [sem] ?1


// objects
////////////////////////////////////////////////////////////////////////
N -> obj(Obj) [-0.9]
  [string] ?1
  [ref] ?1
  [sem] ?1

Obj -> bridge [-0.9]
  [string] "bridge"
  [ref] bridge
  [sem] type

Obj -> wall [-0.9]
  [string] "wall"
  [ref] wall
  [sem] type

Obj -> row [-0.9]
  [string] "row"
  [ref] row
  [sem] type

Obj -> railing [-0.9]
  [string] "railing"
  [ref] railing
  [sem] type

Obj -> block [-0.9]
  [string] "block"
  [ref] block
  [sem] type

Obj -> floor [-0.9]
  [string] "floor"
  [ref] floor
  [sem] type


// locations
////////////////////////////////////////////////////////////////////////
LocP -> top(DefNP) [-0.9]
  [string] *("on top of", ?1)
  [ref] project_1(intersect_2(top-of1,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> below(DefNP) [-0.9]
  [string] *("below of", ?1)
  [ref] project_2(intersect_1(top-of1,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)
  
LocP -> left(DefNP) [-0.9]
  [string] *("to the left of", ?1)
  [ref] project_1(intersect_2(left-of1,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)
  
LocP -> right(DefNP) [-0.9]
  [string] *("to the right of", ?1)
  [ref] project_2(intersect_1(left-of1,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)
  
LocP -> front(DefNP) [-0.9]
  [string] *("in front of", ?1)
  [ref] project_1(intersect_2(in-front-of1,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)
  
LocP -> behind(DefNP) [-0.9]
  [string] *("behind", ?1)
  [ref] project_2(intersect_1(in-front-of1,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

// add "x blocks" - distance relations

LocP -> twotop(DefNP) [-0.9]
  [string] *("two blocks on top of", ?1)
  [ref] project_1(intersect_2(top-of2,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> twoabove(DefNP) [-0.9]
  [string] *("two blocks above", ?1)
  [ref] project_1(intersect_2(top-of2,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> twoleft(DefNP) [-0.9]
  [string] *("two blocks left of", ?1)
  [ref] project_1(intersect_2(left-of2,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> tworight(DefNP) [-0.9]
  [string] *("two blocks right of", ?1)
  [ref] project_2(intersect_1(left-of2,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> twofront(DefNP) [-0.9]
  [string] *("two blocks in front of", ?1)
  [ref] project_1(intersect_2(in-front-of2,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> twobehind(DefNP) [-0.9]
  [string] *("two blocks behind", ?1)
  [ref] project_2(intersect_1(in-front-of2,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> threetop(DefNP) [-0.9]
  [string] *("three blocks on top of", ?1)
  [ref] project_1(intersect_2(top-of3,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> threeabove(DefNP) [-0.9]
  [string] *("three blocks above", ?1)
  [ref] project_1(intersect_2(top-of3,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> threeleft(DefNP) [-0.9]
  [string] *("three blocks left of", ?1)
  [ref] project_1(intersect_2(left-of3,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> threeright(DefNP) [-0.9]
  [string] *("three blocks right of", ?1)
  [ref] project_2(intersect_1(left-of3,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> threefront(DefNP) [-0.9]
  [string] *("three blocks in front of", ?1)
  [ref] project_1(intersect_2(in-front-of3,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> threebehind(DefNP) [-0.9]
  [string] *("three blocks behind", ?1)
  [ref] project_2(intersect_1(in-front-of3,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> fourtop(DefNP) [-0.9]
  [string] *("four blocks on top of", ?1)
  [ref] project_1(intersect_2(top-of4,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> fourabove(DefNP) [-0.9]
  [string] *("four blocks above", ?1)
  [ref] project_1(intersect_2(top-of4,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> fourleft(DefNP) [-0.9]
  [string] *("four blocks left of", ?1)
  [ref] project_1(intersect_2(left-of4,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> fourright(DefNP) [-0.9]
  [string] *("four blocks right of", ?1)
  [ref] project_2(intersect_1(left-of4,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> fourfront(DefNP) [-0.9]
  [string] *("four blocks in front of", ?1)
  [ref] project_1(intersect_2(in-front-of4,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> fourbehind(DefNP) [-0.9]
  [string] *("four blocks behind", ?1)
  [ref] project_2(intersect_1(in-front-of4,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> fivetop(DefNP) [-0.9]
  [string] *("five blocks on top of", ?1)
  [ref] project_1(intersect_2(top-of5,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> fiveabove(DefNP) [-0.9]
  [string] *("five blocks above", ?1)
  [ref] project_1(intersect_2(top-of5,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> fiveleft(DefNP) [-0.9]
  [string] *("five blocks left of", ?1)
  [ref] project_1(intersect_2(left-of5,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> fiveright(DefNP) [-0.9]
  [string] *("five blocks right of", ?1)
  [ref] project_2(intersect_1(left-of5,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> fivefront(DefNP) [-0.9]
  [string] *("five blocks in front of", ?1)
  [ref] project_1(intersect_2(in-front-of5,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

LocP -> fivebehind(DefNP) [-0.9]
  [string] *("five blocks behind", ?1)
  [ref] project_2(intersect_1(in-front-of5,?1))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

// between

// 4 rules for between are needed. First, we need to differentiate between blocks that are in a
// front-behind relationship and blocks that are in left-right relationship. Second, it shouldn't
// matter whether we say "between A and B" or "between B and A" therefore we need betweenlr and
// betweenrl.

LocP -> betweenlr(DefNP, DefNP) [-0.9]
  [string] *("between", *(?1, *("and", ?2)))
  [ref] intersect_1(project_2(intersect_1(left-of,?1)),project_1(intersect_2(left-of,?2)))
  [sem] firstarg(eunion(x1+y1+z1+x2+y2+z2, ?1), ?2)

LocP -> betweenfb(DefNP, DefNP) [-0.9]
  [string] *("between", *(?1, *("and", ?2)))
  [ref] intersect_1(project_2(intersect_1(in-front-of,?1)),project_1(intersect_2(in-front-of,?2)))
  [sem] firstarg(eunion(x1+y1+z1+x2+y2+z2, ?1), ?2)

LocP -> betweenrl(DefNP, DefNP) [-0.9]
  [string] *("between", *(?1, *("and", ?2)))
  [ref] intersect_1(project_2(intersect_1(left-of,?2)),project_1(intersect_2(left-of,?1)))
  [sem] firstarg(eunion(x1+y1+z1+x2+y2+z2, ?1), ?2)

LocP -> betweenbf(DefNP, DefNP) [-0.9]
  [string] *("between", *(?1, *("and", ?2)))
  [ref] intersect_1(project_2(intersect_1(in-front-of,?2)),project_1(intersect_2(in-front-of,?1)))
  [sem] firstarg(eunion(x1+y1+z1+x2+y2+z2, ?1), ?2)

// Single addressable blocks of larger objects

// diff(?1, target): We cannot explain the location of a block
// using the target object we want to describe because the user
// does not know the shape of the target object yet.
// therefore, we remove the target object.

N -> frontleftcorner(DefNP) [-0.9]
  [string] *("front left corner of", ?1)
  [ref] intersect(block, project_2(intersect_1(from, diff(?1, target))))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

N -> backtleftcorner(DefNP) [-0.9]
  [string] *("back left corner of", ?1)
  [ref] intersect(block, project_2(intersect_1(fromaway, diff(?1, target))))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

N -> frontrightcorner(DefNP) [-0.9]
  [string] *("front right corner of", ?1)
  [ref] intersect(block, project_2(intersect_1(tohere, diff(?1, target))))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

N -> backrightcorner(DefNP) [-0.9]
  [string] *("back right corner of", ?1)
  [ref] intersect(block, project_2(intersect_1(to, diff(?1, target))))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

N -> upperrightcorner(DefNP) [-0.9]
  [string] *("upper right corner of", ?1)
  [ref] intersect(block, project_2(intersect_1(to, intersect(wall, diff(?1, target)))))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

N -> upperleftcorner(DefNP) [-0.9]
  [string] *("upper left corner of", ?1)
  [ref] intersect(block, project_2(intersect_1(fromaway, intersect(wall, diff(?1, target)))))
  [sem] firstarg(x1+y1+z1+x2+y2+z2, ?1)

// relations
////////////////////////////////////////////////////////////////////////

N -> from(N, DefNP) [-0.9]
  [string] *(?1, *("from", ?2))
  [ref] intersect(project_1(intersect_2(from, ?2)), ?1)
  [sem] firstarg(eunion(?1, x1+y1+z1), ?2)

N -> fromaway(N, DefNP) [-0.9]
  [string] *(?1, *("from", ?2))
  [ref] intersect(project_1(intersect_2(fromaway, ?2)), ?1)
  [sem] firstarg(eunion(?1, x1+y1+z2), ?2)

N -> fromtopof(N, DefNP) [-0.9]
  [string] *(?1, *("from the top of", ?2))
  [ref] intersect(project_1(intersect_2(fromtopof, ?2)), ?1)
  [sem] firstarg(eunion(?1, x1+y1+z1), ?2)

N -> to(N, DefNP) [-0.9]
  [string] *(?1, *("to", ?2))
  [ref] intersect(project_1(intersect_2(to,?2)), ?1)
  [sem] firstarg(eunion(?1, x2+y2+z2), ?2)

// This rule is valid but might be confusing in some cases
// e.g. "build a wall from the blue block to the top of the
// black block" -- make the score a bit worse to disprefer
// it against slightly longer other options
N -> totopof(N, DefNP) [-3]
   [string] *(?1, *("to the top of", ?2))
   [ref] intersect(project_1(intersect_2(totopof,?2)), ?1)
   [sem] firstarg(eunion(?1, x2+y2+z2), ?2)

N -> tobottom(N, DefNP) [-0.9]
  [string] *(?1, *("to", ?2))
  [ref] intersect(project_1(intersect_2(tobottom,?2)), ?1)
  [sem] firstarg(eunion(?1, x2+y1+z2), ?2)

N -> tohere(N, DefNP) [-0.9]
  [string] *(?1, *("to", ?2))
  [ref] intersect(project_1(intersect_2(tohere,?2)), ?1)
  [sem] firstarg(eunion(?1, x2+y2+z1), ?2)


// on the other side of the bridge
N -> othersideof(N, DefNP) [-0.9]
  [string] *(?1, *("on the other side of", ?2))
  [ref] intersect(?1, project_1(intersect_3(intersect_2(otherside, ?2), it)))
  [sem] firstarg(eunion(?1, x1+y1+z1+x2+y2+z2), ?2)

N -> otherside(N) [-11]
  [string] *(?1, "on the other side")
  [ref] intersect(?1, size_1(project_1(intersect_3(otherside, it))))
  [sem] eunion(?1, x1+y1+z1+x2+y2+z2)

// Use a location as additional description
N -> loc(N,LocP) [-0.9]
  [string] *(?1, ?2)
  [ref] intersect(?1,?2)
  [sem] eunion(?1, ?2)

N -> height2(N) [-0.9]
  [string] *(?1, "of height two")
  [ref] intersect(height2, ?1)
  [sem] eunion(height, ?1)

N -> high2(N) [-0.9]
  [string] *(?1, "which is two blocks high")
  [ref] intersect(height2, ?1)
  [sem] eunion(height, ?1)

/* see https://github.com/coli-saar/alto/issues/62
N -> height3(N) [-0.9]
  [string] *(?1, "of height three")
  [ref] intersect(height3, ?1)
  [sem] eunion(height, ?1)

N -> high3(N) [-0.9]
  [string] *(?1, "which is three blocks high")
  [ref] intersect(height3, ?1)
  [sem] eunion(height, ?1)

N -> height4(N) [-0.9]
  [string] *(?1, "of height four")
  [ref] intersect(height4, ?1)
  [sem] eunion(height, ?1)

N -> high4(N) [-0.9]
  [string] *(?1, "which is four blocks high")
  [ref] intersect(height4, ?1)
  [sem] eunion(height, ?1)
*/
N -> length2(N) [-0.9]
  [string] *(?1, "of length two")
  [ref] intersect(length2, ?1)
  [sem] eunion(length, ?1)

N -> long2(N) [-0.9]
  [string] *(?1, "which is two blocks long")
  [ref] intersect(length2, ?1)
  [sem] eunion(length, ?1)

N -> length3(N) [-0.9]
  [string] *(?1, "of length three")
  [ref] intersect(length3, ?1)
  [sem] eunion(length, ?1)

N -> long3(N) [-0.9]
  [string] *(?1, "which is three blocks long")
  [ref] intersect(length3, ?1)
  [sem] eunion(length, ?1)

N -> length4(N) [-0.9]
  [string] *(?1, "of length four")
  [ref] intersect(length4, ?1)
  [sem] eunion(length, ?1)

N -> long4(N) [-0.9]
  [string] *(?1, "which is four blocks long")
  [ref] intersect(length4, ?1)
  [sem] eunion(length, ?1)

N -> toright(N) [-0.9]
  [string] *(?1, "to the right")
  [ref] intersect(orientleftright, ?1)
  [sem] eunion(orientation, ?1)

N -> orientaway(N) [-0.9]
  [string] *(?1, "away from you")
  [ref] intersect(orientaway, ?1)
  [sem] eunion(orientation, ?1)

N -> fromlefttoright(N) [-0.9]
  [string] *(?1, "from left to right")
  [ref] intersect(orientleftright, ?1)
  [sem] eunion(orientation, ?1)

// adjectives
////////////////////////////////////////////////////////////////////////
Obj -> orange(Obj) [-0.9]
  [string] *("orange", ?1)
  [ref] intersect(orange, ?1)
  [sem] dunion(color, ?1)

Obj -> yellow(Obj) [-0.9]
  [string] *("yellow", ?1)
  [ref] intersect(yellow, ?1)
  [sem] dunion(color, ?1)

Obj -> blue(Obj) [-0.9]
  [string] *("blue", ?1)
  [ref] intersect(blue, ?1)
  [sem] dunion(color, ?1)

Obj -> green(Obj) [-0.9]
  [string] *("green", ?1)
  [ref] intersect(green, ?1)
  [sem] dunion(color, ?1)

Obj -> red(Obj) [-0.9]
  [string] *("red", ?1)
  [ref] intersect(red, ?1)
  [sem] dunion(color, ?1)

Obj -> redw(Obj) [-0.9]
  [string] *("red", ?1)
  [ref] intersect(red_wool, ?1)
  [sem] dunion(color, ?1)

Obj -> bluew(Obj) [-0.9]
  [string] *("blue", ?1)
  [ref] intersect(blue_wool, ?1)
  [sem] dunion(color, ?1)

Obj -> yelloww(Obj) [-0.9]
  [string] *("yellow", ?1)
  [ref] intersect(yellow_wool, ?1)
  [sem] dunion(color, ?1)

Obj -> blackw(Obj) [-0.9]
  [string] *("black", ?1)
  [ref] intersect(black_wool, ?1)
  [sem] dunion(color, ?1)

Obj -> orangew(Obj) [-0.9]
  [string] *("orange", ?1)
  [ref] intersect(orange_wool, ?1)
  [sem] dunion(color, ?1)


// TODO: what is the sem interpretation for this??
// probably not important because this rule can only be used
// to describe definite objects and the sem does not propagate to
// indefinite descriptions
Obj -> prev(Obj) [-0.9]
  [string] *("previous", ?1)
  [ref] intersect(it, ?1)
  [sem] dunion(x1+y1+z1+color, ?1)

/*
IndefPP -> indefHeight(IndefPP) [-0.9]
  [string] *("of height three", ?1)
  [ref] intersect(heightthree, ?1)
  [sem] union(height, ?1)

IndefPP -> widthThree(IndefPP) [-0.9]
  [string] *("of length three", ?1)
  [ref] intersect(widththree, ?1)
  [sem] union(width, ?1)

IndefPP -> depthThree(IndefPP) [-0.9]
  [string] *("of length three", ?1)
  [ref] intersect(depththree, ?1)
  [sem] union(depth, ?1)


IndefPP -> indefSameShapeIt(IndefPP) [-0.9]
  [string] *("of the same shape as the previous one", ?1)
  [ref] intersect(project_1(intersect_2(sameshape, it)), ?1)
  [sem] union(shape, ?1)
*/
